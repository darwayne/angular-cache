{"name":"Angular-cache","tagline":"angular-cache improves upon the capabilities of the $cacheFactory provided by AngularJS.","body":"angular-cache (0.8.2)\r\n=====================\r\nangular-cache is a caching system that improves upon the capabilities of the $cacheFactory provided by AngularJS. With angular-cache your caches can periodically clear themselves and flush items that have expired.\r\n\r\nThe goal of the project is to solve a general problem, not satisfy a specific scenario.\r\n\r\n### Table of Contents\r\n1. [Demo](http://jmdobry.github.io/angular-cache/demo/)\r\n2. [Features](#features)\r\n3. [Status](#status)\r\n4. [Download](#download)\r\n5. [Usage](#usage)\r\n6. [Roadmap](#roadmap)\r\n7. [Contributing](#contributing)\r\n8. [License](#license)\r\n\r\n<a name='demo'></a>\r\n## Demo\r\n\r\n[View the Demo](http://jmdobry.github.io/angular-cache/demo/)\r\n\r\n<a name='features'></a>\r\n## Features\r\n(These are in addition to what Angular's $cacheFactory provides.)\r\n\r\n##### option: `maxAge`\r\nSet a default maximum lifetime on all items added to the cache. They will be removed when they expire. Can be configured on a per-item basis for greater specificity.\r\n\r\ne.g. `$angularCacheFactory('newCache', { maxAge: 36000 })`:\r\n##### option: `cacheFlushInterval`\r\nSet the cache to periodically clear itself.\r\n\r\ne.g. `$angularCacheFactory('newCache', { cacheFlushInterval: 57908 })`\r\n##### method: `keySet()`\r\nReturn the set of keys associated with all current caches owned by $angularCacheFactory.\r\n\r\ne.g. `$angularCacheFactory.keySet()`\r\n\r\nReturn the set of keys associated with all current items in `someCache`.\r\n\r\ne.g. `$angularCacheFactory.get('someCache').keySet()`:\r\n##### method: `keys()`\r\nReturn an array of the keys associated with all current caches owned by $angularCacheFactory.\r\n\r\ne.g. `$angularCacheFactory.keys()`\r\n\r\nReturn an array of the keys associated with all current items in `someCache`.\r\n\r\ne.g. `$angularCacheFactory.get('someCache').keys()`\r\n##### method: `setOptions()`\r\nDynamically configure a cache.\r\n\r\ne.g. `$angularCacheFactory.get('someCache').setOptions({ capacity: 4500 })`\r\n\r\n<a name='status'></a>\r\n## Status\r\n| Version | Branch  | Build status                                                                                                                                                              | Test Coverage |\r\n| ------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- |\r\n| 0.8.2   | [master](https://github.com/jmdobry/angular-cache)  | [![Build Status](https://travis-ci.org/jmdobry/angular-cache.png?branch=master)](https://travis-ci.org/jmdobry/angular-cache) | [Test Coverage](http://jmdobry.github.io/angular-cache/coverage/) |\r\n| 0.8.2   | [develop](https://github.com/jmdobry/angular-cache/tree/develop) | [![Build Status](https://travis-ci.org/jmdobry/angular-cache.png?branch=develop)](https://travis-ci.org/jmdobry/angular-cache) | |\r\n| 0.8.2   | [all](https://drone.io/github.com/jmdobry/angular-cache) | [![Build Status](https://drone.io/github.com/jmdobry/angular-cache/status.png)](https://drone.io/github.com/jmdobry/angular-cache/latest)\r\n\r\n<a name='download'></a>\r\n## Download\r\n#### [All Downloads](https://drone.io/github.com/jmdobry/angular-cache/files) (at www.drone.io)\r\n\r\nor\r\n\r\n#### Latest Stable Version\r\n| Type          | From drone.io | From raw.github.com | Size |\r\n| ------------- | ----------------- | ------------------- | ---- |\r\n| Production    | [angular-cache-0.8.2.min.js](https://drone.io/github.com/jmdobry/angular-cache/files/dist/angular-cache-0.8.2.min.js) | [angular-cache-0.8.2.min.js](https://raw.github.com/jmdobry/angular-cache/master/dist/angular-cache-0.8.2.min.js) | 3.3 KB |\r\n| Development   | [angular-cache-0.8.2.js](https://drone.io/github.com/jmdobry/angular-cache/files/dist/angular-cache-0.8.2.js)         | [angular-cache-0.8.2.js](https://raw.github.com/jmdobry/angular-cache/master/dist/angular-cache-0.8.2.js) | 28.7 KB |\r\n\r\n<a name='usage'></a>\r\n## Usage\r\n\r\n- [Load angular-cache](#load-angular-cache)\r\n- [Create a cache](#create-a-cache)\r\n- [Dynamically configure a cache](#create-a-cache)\r\n- [Retrieve a cache](#retrieve-a-cache)\r\n- [Retrieve items](#retrieve-items)\r\n- [Add items](#add-items)\r\n- [Remove items](#remove-items)\r\n- [Clear all items](#clear-all-items)\r\n- [Destroy a cache](#destroy-a-cache)\r\n- [Get info about a cache](#get-info-about-a-cache)\r\n- [API Documentation](http://jmdobry.github.io/angular-cache/docs/)\r\n\r\n<a name='load-angular-cache'></a>\r\n#### Load angular-cache\r\nMake sure angular-cache is included on your web page after Angular.\r\n```javascript\r\nangular.module('myApp', ['angular-cache']);\r\n```\r\nSee [angular-cache](http://jmdobry.github.io/angular-cache/docs/module-angular-cache.html)\r\n\r\n<a name='create-a-cache'></a>\r\n#### Create a cache\r\n```javascript\r\nangular.module('myApp').service('myService', ['$angularCacheFactory',\r\n    function ($angularCacheFactory) {\r\n\r\n        // create a cache with default settings\r\n        var myCache = $angularCacheFactory('myCache');\r\n\r\n        // create an LRU cache with a capacity of 10\r\n        var myLRUCache = $angularCacheFactory('myLRUCache', {\r\n            capacity: 10\r\n        });\r\n\r\n        // create a cache whose items have a maximum lifetime of 10 minutes\r\n        var myTimeLimitedCache = $angularCacheFactory('myTimeLimitedCache', {\r\n            maxAge: 600000\r\n        });\r\n\r\n        // create a cache that will clear itself every 10 minutes\r\n        var myIntervalCache = $angularCacheFactory('myIntervalCache', {\r\n            cacheFlushInterval: 600000\r\n        });\r\n\r\n        // create an cache with all options\r\n        var myAwesomeCache = $angularCacheFactory('myAwesomeCache', {\r\n            capacity: 10,\r\n            maxAge: 600000,\r\n            cacheFlushInterval: 600000\r\n        });\r\n    }\r\n]);\r\n```\r\nSee [$angularCacheFactory](http://jmdobry.github.io/angular-cache/docs/angularCacheFactory.html)\r\n\r\n<a name='dynamically-configure-a-cache'></a>\r\n#### Dynamically configure a cache\r\n```javascript\r\nangular.module('myApp').service('myService', ['$angularCacheFactory',\r\n    function ($angularCacheFactory) {\r\n\r\n        // create a cache with default settings\r\n        var cache = $angularCacheFactory('cache', {\r\n            capacity: 100,\r\n            maxAge: 30000\r\n        });\r\n\r\n        // Add 50 items here, for example\r\n\r\n        cache.info(); // { ..., size: 50, capacity: 100, maxAge: 3000, ... }\r\n\r\n        cache.setOptions({\r\n            capacity: 30\r\n        });\r\n\r\n        cache.info(); // { ..., size: 30, capacity: 30, maxAge: 3000, ... }\r\n        // notice that only the 30 most recently added items remain in the cache because\r\n        // the capacity was reduced.\r\n\r\n        // setting the second parameter to true will cause the cache's configuration to be\r\n        // reset to defaults before the configuration passed into setOptions() is applied to\r\n        // the cache\r\n        cache.setOptions({\r\n            cacheFlushInterval: 5500\r\n        }, true);\r\n\r\n        cache.info(); // { ..., size: 30, cacheFlushInterval: 5500,\r\n                      //   capacity: 1.7976931348623157e+308, maxAge: null, ... }\r\n    }\r\n]);\r\n```\r\nSee [AngularCache#setOptions](http://jmdobry.github.io/angular-cache/docs/Cache.html#setOptions)\r\n\r\n<a name='retrieve-a-cache'></a>\r\n#### Retrieve a cache\r\n```javascript\r\nangular.module('myApp').service('myOtherService', ['$angularCacheFactory',\r\n    function ($angularCacheFactory) {\r\n\r\n        var myCache = $angularCacheFactory.get('myCache');\r\n    }\r\n]);\r\n```\r\nSee [$angularCacheFactory#get](http://jmdobry.github.io/angular-cache/docs/angularCacheFactory.html#get)\r\n\r\n<a name='retrieve-items'></a>\r\n#### Retrieve items\r\n```javascript\r\nmyCache.get('someItem'); // { name: 'John Doe' });\r\n\r\n// if the item is not in the cache or has expired\r\nmyCache.get('someMissingItem'); // undefined\r\n```\r\nSee [AngularCache#get](http://jmdobry.github.io/angular-cache/docs/Cache.html#get)\r\n\r\n<a name='add-items'></a>\r\n#### Add items\r\n```javascript\r\nmyCache.put('someItem', { name: 'John Doe' });\r\n\r\nmyCache.get('someItem'); // { name: 'John Doe' });\r\n```\r\n\r\nGive a specific item a maximum age\r\n```javascript\r\n// The maxAge given to this item will override the maxAge of the cache, if any was set\r\nmyCache.put('someItem', { name: 'John Doe' }, { maxAge: 10000 });\r\n\r\nmyCache.get('someItem'); // { name: 'John Doe' });\r\n\r\n// wait at least ten seconds\r\nsetTimeout(function() {\r\n\r\n    myCache.get('someItem'); // undefined\r\n\r\n}, 15000); // 15 seconds\r\n```\r\nSee [AngularCache#put](http://jmdobry.github.io/angular-cache/docs/Cache.html#put)\r\n\r\n<a name='remove-items'></a>\r\n#### Remove items\r\n```javascript\r\nmyCache.put('someItem', { name: 'John Doe' });\r\n\r\nmyCache.remove('someItem');\r\n\r\nmyCache.get('someItem'); // undefined\r\n```\r\nSee [AngularCache#remove](http://jmdobry.github.io/angular-cache/docs/Cache.html#remove)\r\n\r\n<a name='clear-all-items'></a>\r\n#### Clear all items\r\n```javascript\r\nmyCache.put('someItem', { name: 'John Doe' });\r\nmyCache.put('someOtherItem', { name: 'Sally Jean' });\r\n\r\nmyCache.removeAll();\r\n\r\nmyCache.get('someItem'); // undefined\r\nmyCache.get('someOtherItem'); // undefined\r\n```\r\nSee [AngularCache#removeAll](http://jmdobry.github.io/angular-cache/docs/Cache.html#removeAll)\r\n\r\n<a name='destroy-a-cache'></a>\r\n#### Destroy a cache\r\n```javascript\r\nmyCache.destroy();\r\n\r\nmyCache.get('someItem'); // Will throw an error - Don't try to use a cache after destroying it!\r\n\r\n$angularCacheFactory.get('myCache'); // undefined\r\n```\r\nSee [AngularCache#destroy](http://jmdobry.github.io/angular-cache/docs/Cache.html#destroy)\r\n\r\n<a name='get-info-about-a-cache'></a>\r\n#### Get info about a cache\r\n```javascript\r\nmyCache.info(); // { id: 'myCache', size: 13 }\r\n```\r\nSee [AngularCache#info](http://jmdobry.github.io/angular-cache/docs/Cache.html#info)\r\n\r\n### [API Documentation](http://jmdobry.github.io/angular-cache/docs/)\r\n\r\n<a name='roadmap'></a>\r\n## Roadmap\r\n\r\n##### 0.9.x Release Candidate\r\n- Bug fixes\r\n- Documentation tidy up.\r\n\r\n##### 1.0.0 Stable Release\r\n- Yay!\r\n\r\n<a name='contributing'></a>\r\n## Contributing\r\n\r\n#### Submitting Issues\r\n1. Make sure you aren't submitting a duplicate issue.\r\n2. Carefully describe how to reproduce the problem.\r\n3. Expect prompt feedback.\r\n\r\n#### Submitting Pull Requests\r\n\r\n##### Basic Idea\r\n- Checkout a new branch based on `develop` and name it to what you intend to do:\r\n  - Example:\r\n    ````\r\n    $ git checkout -b BRANCH_NAME\r\n    ````\r\n  - Use one branch per fix/feature\r\n  - Prefix your branch name with `feature-` or `fix-` appropriately.\r\n- Make your changes\r\n  - Make sure to provide a spec for unit tests\r\n  - Run your tests with either `karma start` or `grunt test`\r\n  - Make sure the tests pass\r\n- Commit your changes\r\n  - Please provide a git message which explains what you've done\r\n  - Commit to the forked repository\r\n- Make a pull request\r\n  - Make sure you send the PR to the `develop` branch\r\n  - Travis CI is watching you!\r\n\r\n##### More details\r\nRead the detailed [Contributing Guide](https://github.com/jmdobry/angular-cache/blob/master/CONTRIBUTING.md)\r\n\r\n<a name='license'></a>\r\n## License\r\n[MIT License](https://github.com/jmdobry/angular-cache/blob/master/LICENSE)\r\n\r\nCopyright (C) 2013 Jason Dobry\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/e2db52aae7932708ba8790ab395ab1ca \"githalytics.com\")](http://githalytics.com/jmdobry/angular-cache)\r\n","google":"UA-35377610-1","note":"Don't delete this file! It's used internally to help with page regeneration."}