{"name":"Angular-cache","tagline":"angular-cache improves upon the capabilities of the $cacheFactory provided by AngularJS.","body":"angular-cache (1.0.0)\r\n=====================\r\nangular-cache is a caching system that improves upon the capabilities of the $cacheFactory provided by AngularJS. Check out the [demo](http://jmdobry.github.io/angular-cache/demo/) for a quick introduction, or continue on down for more detailed information.\r\n\r\nThe goal of the project is to solve a general problem, not satisfy a specific scenario.\r\n\r\n### Quick Introduction\r\n\r\n#### [View the Demo](http://jmdobry.github.io/angular-cache/demo/)\r\n\r\n##### $cacheFactory\r\n```javascript\r\n// Angular's provided $cacheFactory\r\napp.service('myService', function ($cacheFactory) {\r\n    // This is all you can do with $cacheFactory\r\n    $cacheFactory('myNewCache', { capacity: 1000 }); // This cache can hold 1000 items\r\n});\r\n```\r\n\r\n#### vs\r\n\r\n##### $angularCacheFactory\r\n```javascript\r\n// Smarter caching with $angularCacheFactory\r\napp.service('myService', function ($angularCacheFactory) {\r\n    $angularCacheFactory('myNewCache', {\r\n        capacity: 1000,  // This cache can hold 1000 items,\r\n        maxAge: 90000, // Items added to this cache expire after 15 minutes\r\n        aggressiveDelete: true, // Items will be actively deleted when they expire\r\n        cacheFlushInterval: 3600000, // This cache will clear itself every hour,\r\n        storageMode: 'localStorage' // This cache will sync itself with localStorage\r\n     });\r\n});\r\n```\r\n\r\n### Table of Contents\r\n1. [Demo](http://jmdobry.github.io/angular-cache/demo/)\r\n1. [Features](#features)\r\n1. [Status](#status)\r\n1. [Download](#download)\r\n1. [Install](#installation)\r\n1. [Usage](#usage)\r\n1. [Changelog](#changelog)\r\n1. [Contributing](#contributing)\r\n1. [License](#license)\r\n\r\n<a name='features'></a>\r\n## Features\r\n\r\n#### Configuration Parameters\r\n\r\n##### `storageMode`\r\nConfigure the cache to sync itself with `localStorage` or `sessionStorage`. The cache will re-initialize itself from `localStorage` and `sessionStorage` on page refresh. See [Using angular-cache with localStorage](#using-angular-cache-with-localStorage).\r\n\r\n```javascript\r\n$angularCacheFactory('newCache', { storageMode: 'localStorage' });\r\n```\r\n\r\n##### `localStorageImpl` and `sessionStorageImpl`\r\nWhen `storageMode` is set to `\"localStorage\"` or `\"sessionStorage\"` angular-cache will default to using the global `localStorage` and `sessionStorage` objects. The angular-cache `localStorageImpl` and `sessionStorageImpl` configuration parameters allow you to tell angular-cache which implementation of `localStorage` or `sessionStorage` to use. This is useful when you don't want to override the global storage objects or when using angular-cache in a browser that doesn't support `localStorage` or `sessionStorage`. See [Using angular-cache with localStorage](#using-angular-cache-with-localStorage).\r\n\r\n```javascript\r\n$angularCacheFactory('newCache', { localStorageImpl: myLocalStorageImplementation, storageMode: 'localStorage' });\r\n\r\n$angularCacheFactory('otherCache', { localStorageImpl: mySessionStorageImplementation, storageMode: 'sessionStorage' });\r\n```\r\n\r\n__Note:__ If angular-cache doesn't detect a global `localStorage` or `sessionStorage` and you don't provide a polyfill, then that feature will be disabled. It is up to the developer to provide a polyfill for browsers that don't support `localStorage` and `sessionStorage`. Any implementation of `localStorage` and `sessionStorage` provided to angular-cache must implement at least the `setItem`, `getItem`, and `removeItem` methods. See [Using angular-cache with localStorage](#using-angular-cache-with-localStorage).\r\n\r\n##### `maxAge`\r\nSet a default maximum lifetime on all items added to the cache. They will be removed aggressively or passively depending on the value of `aggressiveDelete` (see below). Can be configured on a per-item basis for greater specificity.\r\n\r\n```javascript\r\n$angularCacheFactory('newCache', { maxAge: 36000 });\r\n```\r\n\r\n##### `aggressiveDelete`\r\nIf true and maxAge is set, then items will be actively deleted right when they expire, otherwise items won't be deleted until they are requested but it is discovered that they have expired and are deleted, resulting in a miss. Can be configured on a per-item basis for greater specificity.\r\n\r\n```javascript\r\n$angularCacheFactory('newCache', {\r\n    maxAge: 36000,\r\n    aggressiveDelete: true\r\n});\r\n```\r\n\r\n##### `cacheFlushInterval`\r\nSet the cache to periodically clear itself.\r\n\r\n```javascript\r\n$angularCacheFactory('newCache', { cacheFlushInterval: 57908 });\r\n```\r\n\r\n#### Methods\r\n\r\n##### `keySet()`\r\nReturn the set of keys associated with all current caches owned by $angularCacheFactory.\r\n\r\n```javascript\r\n$angularCacheFactory.keySet();\r\n```\r\n\r\nReturn the set of keys associated with all current items in `someCache`.\r\n\r\n```javascript\r\n$angularCacheFactory.get('someCache').keySet();\r\n```\r\n\r\n##### `keys()`\r\nReturn an array of the keys associated with all current caches owned by $angularCacheFactory.\r\n\r\n```javascript\r\n$angularCacheFactory.keys();\r\n```\r\n\r\nReturn an array of the keys associated with all current items in `someCache`.\r\n\r\n```javascript\r\n$angularCacheFactory.get('someCache').keys();\r\n```\r\n\r\n##### `setOptions()`\r\nDynamically configure a cache.\r\n\r\n```javascript\r\n$angularCacheFactory.get('someCache').setOptions({ capacity: 4500 });\r\n```\r\n\r\n<a name='status'></a>\r\n## Status\r\n| Version | Branch  | Build status                                                                                                                                                              | Test Coverage |\r\n| ------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- |\r\n| 1.0.0   | [master](https://github.com/jmdobry/angular-cache)  | [![Build Status](https://travis-ci.org/jmdobry/angular-cache.png?branch=master)](https://travis-ci.org/jmdobry/angular-cache) | [Test Coverage](http://jmdobry.github.io/angular-cache/coverage/) |\r\n| 1.0.0   | [develop](https://github.com/jmdobry/angular-cache/tree/develop) | [![Build Status](https://travis-ci.org/jmdobry/angular-cache.png?branch=develop)](https://travis-ci.org/jmdobry/angular-cache) | |\r\n| 1.0.0   | [all](https://drone.io/github.com/jmdobry/angular-cache) | [![Build Status](https://drone.io/github.com/jmdobry/angular-cache/status.png)](https://drone.io/github.com/jmdobry/angular-cache/latest)\r\n\r\n<a name='download'></a>\r\n## Download\r\n\r\n#### Latest Stable Version\r\n| Type          | File | Size |\r\n| ------------- | ----------------- | ------------------- | ---- |\r\n| Production    | [angular-cache-1.0.0.min.js](https://raw.github.com/jmdobry/angular-cache/master/dist/angular-cache-1.0.0.min.js) | 6 KB |\r\n| Development   | [angular-cache-1.0.0.js](https://raw.github.com/jmdobry/angular-cache/master/dist/angular-cache-1.0.0.js) | 34 KB |\r\n\r\n<a name='installation'></a>\r\n## Installation\r\n\r\n#### Install with bower\r\n```javascript\r\nbower install angular-cache\r\n```\r\n\r\nInclude `src/angular-cache.js` on your web page after `angular.js`.\r\n\r\n#### Manual install\r\nGet angular-cache from the [Download](#download) section and include it on your web page after `angular.js`.\r\n\r\n<a name='usage'></a>\r\n## Usage\r\n\r\n- [Load angular-cache](#load-angular-cache)\r\n- [Create a cache](#create-a-cache)\r\n- [Using angular-cache with localStorage](#using-angular-cache-with-localStorage)\r\n- [Using angular-cache with $http](#using-angular-cache-with-$http)\r\n- [Dynamically configure a cache](#create-a-cache)\r\n- [Retrieve a cache](#retrieve-a-cache)\r\n- [Retrieve items](#retrieve-items)\r\n- [Add items](#add-items)\r\n- [Remove items](#remove-items)\r\n- [Clear all items](#clear-all-items)\r\n- [Destroy a cache](#destroy-a-cache)\r\n- [Get info about a cache](#get-info-about-a-cache)\r\n- [API Documentation](http://jmdobry.github.io/angular-cache/docs/)\r\n\r\n<a name='load-angular-cache'></a>\r\n#### Load angular-cache\r\nMake sure angular-cache is included on your web page after `angular.js`.\r\n```javascript\r\nangular.module('myApp', ['angular-cache']);\r\n```\r\nSee [angular-cache](http://jmdobry.github.io/angular-cache/docs/module-angular-cache.html)\r\n\r\n<a name='create-a-cache'></a>\r\n#### Create a cache\r\n```javascript\r\napp.service('myService', function ($angularCacheFactory) {\r\n\r\n    // create a cache with default settings\r\n    var myCache = $angularCacheFactory('myCache');\r\n\r\n    // create an LRU cache with a capacity of 10\r\n    var myLRUCache = $angularCacheFactory('myLRUCache', {\r\n        capacity: 10\r\n    });\r\n\r\n    // create a cache whose items have a maximum lifetime of 10 minutes\r\n    var myTimeLimitedCache = $angularCacheFactory('myTimeLimitedCache', {\r\n        maxAge: 600000\r\n    });\r\n\r\n    // create a cache that will clear itself every 10 minutes\r\n    var myIntervalCache = $angularCacheFactory('myIntervalCache', {\r\n        cacheFlushInterval: 600000\r\n    });\r\n\r\n    // create an cache with all options\r\n    var myAwesomeCache = $angularCacheFactory('myAwesomeCache', {\r\n        capacity: 10, // This cache can only hold 10 items.\r\n        maxAge: 90000, // Items added to this cache expire after 15 minutes.\r\n        cacheFlushInterval: 600000, // This cache will clear itself every hour.\r\n        aggressiveDelete: true, // Items will be deleted from this cache right when they expire.\r\n        storageMode: 'localStorage', // This cache will sync itself with `localStorage`.\r\n        localStorageImpl: myAwesomeLSImpl // This cache will use a custom implementation of localStorage.\r\n    });\r\n});\r\n```\r\nSee [$angularCacheFactory](http://jmdobry.github.io/angular-cache/docs/angularCacheFactory.html)\r\n\r\n<a name='using-angular-cache-with-localStorage'></a>\r\n#### Using angular-cache with localStorage (or sessionStorage)\r\nUsing angular-cache in browsers that support localStorage:\r\n```javascript\r\napp.service('myService', function ($angularCacheFactory) {\r\n\r\n    // This cache will sync itself with localStorage if it exists, otherwise it won't. Every time the\r\n    // browser loads this app, this cache will attempt to initialize itself with any data it had\r\n    // already saved to localStorage (or sessionStorage if you used that).\r\n    var myAwesomeCache = $angularCacheFactory('myAwesomeCache', {\r\n        maxAge: 90000, // Items added to this cache expire after 15 minutes.\r\n        cacheFlushInterval: 600000, // This cache will clear itself every hour.\r\n        aggressiveDelete: true, // Items will be deleted from this cache right when they expire.\r\n        storageMode: 'localStorage' // This cache will sync itself with `localStorage`.\r\n    });\r\n});\r\n```\r\n\r\nUsing angular-cache in browsers that DON'T support localStorage:\r\n\r\nOption 1 - Do nothing (the localStorage sync feature will be disabled)\r\n\r\nOption 2 - Create/use a polyfill that provides the global `localStorage` and `sessionStorage` objects. angular-cache will attempt to use these if it finds them.\r\n\r\nOption 3 - Tell angular-cache exactly which polyfill to use (also useful if you just want to use your own implementation/wrapper for localStorage):\r\n```javascript\r\napp.service('myService', function ($angularCacheFactory) {\r\n\r\n    var localStoragePolyfill = {\r\n        getItem: function (key) { ... },\r\n        setItem: function (key, value) { ... },\r\n        removeItem: function (key) { ... }\r\n    };\r\n\r\n    // Always use the polyfill\r\n    var myAwesomeCache = $angularCacheFactory('myAwesomeCache', {\r\n        maxAge: 90000, // Items added to this cache expire after 15 minutes.\r\n        cacheFlushInterval: 600000, // This cache will clear itself every hour.\r\n        aggressiveDelete: true, // Items will be deleted from this cache right when they expire.\r\n        storageMode: 'localStorage', // This cache will sync itself with `localStorage`.\r\n        localStorageImpl: localStoragePolyfill // angular-cache will use this polyfill instead of looking for localStorage\r\n    });\r\n\r\n    // Conditionally use the polyfill\r\n    var options = {\r\n        maxAge: 90000, // Items added to this cache expire after 15 minutes.\r\n        cacheFlushInterval: 600000, // This cache will clear itself every hour.\r\n        aggressiveDelete: true, // Items will be deleted from this cache right when they expire.\r\n        storageMode: 'localStorage' // This cache will sync itself with `localStorage`.\r\n    };\r\n    if (!window.localStorage) {\r\n        options.localStorageImpl = localStoragePolyfill;\r\n    }\r\n    var myAwesomeCache = $angularCacheFactory('myAwesomeCache', options);\r\n});\r\n```\r\n\r\nDocumentation on the interface that must be implementated by any localStorage/sessionStorage polyfill used by angular-cache can be found on the [W3C Recommendation](http://www.w3.org/TR/2013/REC-webstorage-20130730/) page for webstorage. The interface itself looks like:\r\n```java\r\ninterface Storage {\r\n  readonly attribute unsigned long length;\r\n  DOMString? key(unsigned long index);\r\n  getter DOMString getItem(DOMString key);\r\n  setter creator void setItem(DOMString key, DOMString value);\r\n  deleter void removeItem(DOMString key);\r\n  void clear();\r\n};\r\n```\r\n\r\nangular-cache cares only about these three methods:\r\n- [setItem](http://www.w3.org/TR/2013/REC-webstorage-20130730/#dom-storage-setitem)\r\n- [getItem](http://www.w3.org/TR/2013/REC-webstorage-20130730/#dom-storage-getitem)\r\n- [removeItem](http://www.w3.org/TR/2013/REC-webstorage-20130730/#dom-storage-removeitem)\r\n\r\nOne developer suggested using [store.js](https://github.com/marcuswestin/store.js/)–a wrapper and polyfill for localStorage. However, store.js has its own API that doesn't match that of the webstorage spec, so if you want to use store.js or any other 3rd-party polyfill then you'll need to create a wrapper for it if it doesn't have the same API as `localStorage`. For example:\r\n```javascript\r\nvar storeJsToStandard {\r\n  getItem: store.get,\r\n  setItem: store.set,\r\n  removeItem: store.remove\r\n};\r\n\r\n$angularCacheFactory('myNewCache', {\r\n  storageMode: 'localStorage',\r\n  localStorageImpl: storeJsToStandard\r\n});\r\n```\r\n\r\n<a name='using-angular-cache-with-$http'></a>\r\n#### Using angular-cache with $http\r\n\r\n__Note__ The downside of letting $http handle caching for you is that it caches the responses (in string form) to your requests–not the JavaScript Object parsed from the response body. This means you can't interact with the data in the cache used by `$http`. See below for how to handle the caching yourself–giving you more control and the ability to interact with the cache (use it as a data store).\r\n\r\nConfigure `$http` to use a cache created by `$angularCacheFactory` by default:\r\n```javascript\r\napp.run(function ($http, $angularCacheFactory) {\r\n\r\n    $angularCacheFactory('defaultCache', {\r\n        maxAge: 90000, // Items added to this cache expire after 15 minutes.\r\n        cacheFlushInterval: 600000, // This cache will clear itself every hour.\r\n        aggressiveDelete: true // Items will be deleted from this cache right when they expire.\r\n    });\r\n\r\n    $http.defaults.cache = $angularCacheFactory.get('defaultCache');\r\n});\r\n\r\napp.service('myService', function ($http) {\r\n    return {\r\n        getDataById: function (id) {\r\n            var deferred = $q.defer(),\r\n                start = new Date().getTime();\r\n\r\n            $http.get('api/data/' + id, {\r\n                cache: true\r\n            }).success(function (data) {\r\n                console.log('time taken for request: ' + (new Date().getTime() - start) + 'ms');\r\n                deferred.resolved(data);\r\n            });\r\n            return deferred.promise;\r\n        }\r\n    };\r\n});\r\n\r\napp.controller('myCtrl', function (myService) {\r\n    myService.getDataById(1)\r\n        .then(function (data) {\r\n            // e.g. \"time taken for request: 2375ms\"\r\n            // Data returned by this next call is already cached.\r\n            myService.getDataById(1)\r\n                .then(function (data) {\r\n                    // e.g. \"time taken for request: 1ms\"\r\n                });\r\n        });\r\n});\r\n```\r\n\r\nTell `$http` to use a cache created by `$angularCacheFactory` for a specific request:\r\n```javascript\r\napp.service('myService', function ($http, $angularCacheFactory) {\r\n\r\n    $angularCacheFactory('dataCache', {\r\n        maxAge: 90000, // Items added to this cache expire after 15 minutes.\r\n        cacheFlushInterval: 600000, // This cache will clear itself every hour.\r\n        aggressiveDelete: true // Items will be deleted from this cache right when they expire.\r\n    });\r\n\r\n    return {\r\n        getDataById: function (id) {\r\n            var deferred = $q.defer(),\r\n                start = new Date().getTime();\r\n\r\n            $http.get('api/data/' + id, {\r\n                cache: $angularCacheFactory.get('dataCache')\r\n            }).success(function (data) {\r\n                console.log('time taken for request: ' + (new Date().getTime() - start) + 'ms');\r\n                deferred.resolved(data);\r\n            });\r\n            return deferred.promise;\r\n        }\r\n    };\r\n});\r\n\r\napp.controller('myCtrl', function (myService) {\r\n    myService.getDataById(1)\r\n        .then(function (data) {\r\n            // e.g. \"time taken for request: 2375ms\"\r\n            // Data returned by this next call is already cached.\r\n            myService.getDataById(1)\r\n                .then(function (data) {\r\n                    // e.g. \"time taken for request: 1ms\"\r\n                });\r\n        });\r\n});\r\n```\r\n\r\nDo your own caching while using the $http service:\r\n```javascript\r\napp.service('myService', function ($http, $angularCacheFactory) {\r\n\r\n    $angularCacheFactory('dataCache', {\r\n        maxAge: 90000, // Items added to this cache expire after 15 minutes.\r\n        cacheFlushInterval: 600000, // This cache will clear itself every hour.\r\n        aggressiveDelete: true // Items will be deleted from this cache right when they expire.\r\n    });\r\n\r\n    return {\r\n        getDataById: function (id) {\r\n            var deferred = $q.defer(),\r\n                start = new Date().getTime(),\r\n                dataCache = $angularCacheFactory.get('dataCache');\r\n\r\n            // Now that control of inserting/removing from the cache is in our hands,\r\n            // we can interact with the data in \"dataCache\" outside of this context,\r\n            // e.g. Modify the data after it has been returned from the server and\r\n            // save those modifications to the cache.\r\n            if (dataCache.get(id)) {\r\n                deferred.resolve(dataCache.get(id));\r\n            } else {\r\n                $http.get('api/data/' + id).success(function (data) {\r\n                        console.log('time taken for request: ' + (new Date().getTime() - start) + 'ms');\r\n                        deferred.resolved(data);\r\n                    });\r\n            }\r\n            return deferred.promise;\r\n        }\r\n    };\r\n});\r\n\r\napp.controller('myCtrl', function (myService) {\r\n    myService.getDataById(1)\r\n        .then(function (data) {\r\n            // e.g. \"time taken for request: 2375ms\"\r\n            // Data returned by this next call is already cached.\r\n            myService.getDataById(1)\r\n                .then(function (data) {\r\n                    // e.g. \"time taken for request: 1ms\"\r\n                });\r\n        });\r\n});\r\n```\r\n\r\n<a name='dynamically-configure-a-cache'></a>\r\n#### Dynamically configure a cache\r\n```javascript\r\napp.service('myService', function ($angularCacheFactory) {\r\n\r\n    // create a cache with default settings\r\n    var cache = $angularCacheFactory('cache', {\r\n        capacity: 100,\r\n        maxAge: 30000\r\n    });\r\n\r\n    // Add 50 items here, for example\r\n\r\n    cache.info(); // { ..., size: 50, capacity: 100, maxAge: 3000, ... }\r\n\r\n    cache.setOptions({\r\n        capacity: 30\r\n    });\r\n\r\n    cache.info(); // { ..., size: 30, capacity: 30, maxAge: 3000, ... }\r\n    // notice that only the 30 most recently added items remain in the cache because\r\n    // the capacity was reduced.\r\n\r\n    // setting the second parameter to true will cause the cache's configuration to be\r\n    // reset to defaults before the configuration passed into setOptions() is applied to\r\n    // the cache\r\n    cache.setOptions({\r\n        cacheFlushInterval: 5500\r\n    }, true);\r\n\r\n    cache.info(); // { ..., size: 30, cacheFlushInterval: 5500,\r\n                  //   capacity: 1.7976931348623157e+308, maxAge: null, ... }\r\n});\r\n```\r\nSee [AngularCache#setOptions](http://jmdobry.github.io/angular-cache/docs/Cache.html#setOptions)\r\n\r\n<a name='retrieve-a-cache'></a>\r\n#### Retrieve a cache\r\n```javascript\r\napp.service('myOtherService', function ($angularCacheFactory) {\r\n\r\n    var myCache = $angularCacheFactory.get('myCache');\r\n});\r\n```\r\nSee [$angularCacheFactory#get](http://jmdobry.github.io/angular-cache/docs/angularCacheFactory.html#get)\r\n\r\n<a name='retrieve-items'></a>\r\n#### Retrieve items\r\n```javascript\r\nmyCache.get('someItem'); // { name: 'John Doe' });\r\n\r\n// if the item is not in the cache or has expired\r\nmyCache.get('someMissingItem'); // undefined\r\n```\r\nSee [AngularCache#get](http://jmdobry.github.io/angular-cache/docs/Cache.html#get)\r\n\r\n<a name='add-items'></a>\r\n#### Add items\r\n```javascript\r\nmyCache.put('someItem', { name: 'John Doe' });\r\n\r\nmyCache.get('someItem'); // { name: 'John Doe' });\r\n```\r\n\r\nGive a specific item a maximum age\r\n```javascript\r\n// The maxAge given to this item will override the maxAge of the cache, if any was set\r\nmyCache.put('someItem', { name: 'John Doe' }, { maxAge: 10000 });\r\n\r\nmyCache.get('someItem'); // { name: 'John Doe' });\r\n\r\n// wait at least ten seconds\r\nsetTimeout(function() {\r\n\r\n    myCache.get('someItem'); // undefined\r\n\r\n}, 15000); // 15 seconds\r\n```\r\nSee [AngularCache#put](http://jmdobry.github.io/angular-cache/docs/Cache.html#put)\r\n\r\n<a name='remove-items'></a>\r\n#### Remove items\r\n```javascript\r\nmyCache.put('someItem', { name: 'John Doe' });\r\n\r\nmyCache.remove('someItem');\r\n\r\nmyCache.get('someItem'); // undefined\r\n```\r\nSee [AngularCache#remove](http://jmdobry.github.io/angular-cache/docs/Cache.html#remove)\r\n\r\n<a name='clear-all-items'></a>\r\n#### Clear all items\r\n```javascript\r\nmyCache.put('someItem', { name: 'John Doe' });\r\nmyCache.put('someOtherItem', { name: 'Sally Jean' });\r\n\r\nmyCache.removeAll();\r\n\r\nmyCache.get('someItem'); // undefined\r\nmyCache.get('someOtherItem'); // undefined\r\n```\r\nSee [AngularCache#removeAll](http://jmdobry.github.io/angular-cache/docs/Cache.html#removeAll)\r\n\r\n<a name='destroy-a-cache'></a>\r\n#### Destroy a cache\r\n```javascript\r\nmyCache.destroy();\r\n\r\nmyCache.get('someItem'); // Will throw an error - Don't try to use a cache after destroying it!\r\n\r\n$angularCacheFactory.get('myCache'); // undefined\r\n```\r\nSee [AngularCache#destroy](http://jmdobry.github.io/angular-cache/docs/Cache.html#destroy)\r\n\r\n<a name='get-info-about-a-cache'></a>\r\n#### Get info about a cache\r\n```javascript\r\nmyCache.info(); // { id: 'myCache', size: 13 }\r\n```\r\nSee [AngularCache#info](http://jmdobry.github.io/angular-cache/docs/Cache.html#info)\r\n\r\n### [API Documentation](http://jmdobry.github.io/angular-cache/docs/)\r\n\r\n<a name='changelog'></a>\r\n## Changelog\r\n\r\n##### 1.0.0 - 26 August 2013\r\n- Closed #31 (Improved documentation)\r\n- Closed #32\r\n\r\n##### 1.0.0-rc.1 - 21 August 2013\r\n- Added localStorage feature #26, #29\r\n\r\n##### 0.9.1 - 03 August 2013\r\n- Fixed #25\r\n\r\n##### 0.9.0 - 03 August 2013\r\n- Added a changelog #13\r\n- Added documentation for installing with bower\r\n- Added ability to set option `aggressiveDelete` when creating cache and when adding items\r\n- Cleaned up README.md\r\n- Switched the demo to use Bootstrap 3\r\n\r\n##### 0.8.2 - 09 July 2013\r\n- Added CONTRIBUTING.md #22\r\n- Cleaned up meta data in bower.json and package.json\r\n\r\n##### 0.8.1 - 09 July 2013\r\n- Added .jshintrc\r\n- Cleaned up the docs a bit\r\n- `bower.json` now uses `src/angular-cache.js` instead of the versioned output files #21\r\n- From now on the tags for the project will be named using [semver](http://semver.org/)\r\n\r\n##### 0.8.0 - 08 July 2013\r\n- Added `AngularCache.setOptions()`, the ability to dynamically change the configuration of a cache #20\r\n- Added `AngularCache.keys()`, which returns an array of the keys in a cache #19\r\n- Added `AngularCache.keySet()`, which returns a hash of the keys in a cache #19\r\n\r\n##### 0.7.2 - June 2013\r\n- Added `angular-cache` to bower registry #7\r\n- Created a working demo #9 #17\r\n- Fixed the size not being reset to 0 when the cache clears itself #14 #16\r\n- Added `$angularCacheFactory.keys()`, which returns an array of the keys (the names of the caches) in $angularCacheFactory #18\r\n- Added `$angularCacheFactory.keySet()`, which returns a hash of the keys (the names of the caches) in $angularCacheFactory #18\r\n\r\n##### 0.6.1 - June 2013\r\n- Got the project building on TravisCI\r\n- Renamed the project to `angular-cache` #5\r\n\r\n##### 0.5.0 - June 2013\r\n- Added a roadmap to README.md #4\r\n- Clarify usage documentation #3\r\n- Wrote unit tests #2\r\n\r\n##### 0.4.0 - May 2013\r\n- Added Grunt build tasks #1\r\n\r\n<a name='contributing'></a>\r\n## Contributing\r\n\r\n#### Submitting Issues\r\n1. Make sure you aren't submitting a duplicate issue.\r\n2. Carefully describe how to reproduce the problem.\r\n3. Expect prompt feedback.\r\n\r\n#### Submitting Pull Requests\r\n\r\n##### Basic Idea\r\n- Checkout a new branch based on `develop` and name it to what you intend to do:\r\n  - Example:\r\n    ````\r\n    $ git checkout -b BRANCH_NAME\r\n    ````\r\n  - Use one branch per fix/feature\r\n  - Prefix your branch name with `feature-` or `fix-` appropriately.\r\n- Make your changes\r\n  - Make sure to provide a spec for unit tests\r\n  - Run your tests with either `karma start` or `grunt test`\r\n  - Make sure the tests pass\r\n- Commit your changes\r\n  - Please provide a git message which explains what you've done\r\n  - Commit to the forked repository\r\n- Make a pull request\r\n  - Make sure you send the PR to the `develop` branch\r\n  - Travis CI is watching you!\r\n\r\n##### More details\r\nRead the detailed [Contributing Guide](https://github.com/jmdobry/angular-cache/blob/master/CONTRIBUTING.md)\r\n\r\n<a name='license'></a>\r\n## License\r\n[MIT License](https://github.com/jmdobry/angular-cache/blob/master/LICENSE)\r\n\r\nCopyright (C) 2013 Jason Dobry\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}